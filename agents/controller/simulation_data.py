"""
Module de simulation de donn√©es pour tester les agents sans acc√®s aux bases de donn√©es
Ce module fournit des donn√©es simul√©es pour permettre le test des agents
sans n√©cessiter l'acc√®s aux bases de donn√©es r√©elles.
"""

import json
import random
import datetime
from typing import Tuple, List, Dict, Any

# Niches d'exemple pour la simulation
EXAMPLE_NICHES = [
    "avocats droit des affaires",
    "plombiers urgence",
    "cabinets dentaires priv√©s",
    "agences immobili√®res de luxe",
    "comptables freelance",
    "psychologues en ligne",
    "architectes d'int√©rieur",
    "services de nettoyage professionnel",
    "consultants marketing digital",
    "d√©veloppeurs web ind√©pendants",
    "coachs sportifs √† domicile",
    "√©coles de langues priv√©es",
    "v√©t√©rinaires √† domicile",
    "traducteurs juridiques",
    "organisateurs d'√©v√©nements",
]

# Locations d'exemple
EXAMPLE_LOCATIONS = [
    "Paris", "Lyon", "Marseille", "Bordeaux", "Lille", 
    "Toulouse", "Nice", "Nantes", "Strasbourg", "Montpellier"
]

def generate_campaign_id() -> str:
    """G√©n√®re un ID de campagne unique"""
    timestamp = int(datetime.datetime.now().timestamp())
    suffix = random.randint(1000, 9999)
    return f"CAM_{timestamp}_{suffix}"

def generate_past_campaign() -> Dict[str, Any]:
    """G√©n√®re une campagne pass√©e simul√©e"""
    start_date = datetime.datetime.now() - datetime.timedelta(days=random.randint(30, 180))
    end_date = start_date + datetime.timedelta(days=random.randint(7, 30))
    
    # G√©n√©rer des m√©triques de performance al√©atoires
    lead_count = random.randint(20, 200)
    qualified_count = int(lead_count * random.uniform(0.3, 0.8))
    conversion_count = int(qualified_count * random.uniform(0.1, 0.5))
    
    # Calculer les taux
    qualification_rate = qualified_count / lead_count if lead_count > 0 else 0
    conversion_rate = conversion_count / qualified_count if qualified_count > 0 else 0
    global_success = conversion_rate > 0.2  # Succ√®s si taux de conversion > 20%
    
    return {
        "campaign_id": generate_campaign_id(),
        "niche": random.choice(EXAMPLE_NICHES),
        "location": random.choice(EXAMPLE_LOCATIONS),
        "start_date": start_date.isoformat(),
        "end_date": end_date.isoformat(),
        "metrics": {
            "lead_count": lead_count,
            "qualified_count": qualified_count,
            "conversion_count": conversion_count,
            "qualification_rate": qualification_rate,
            "conversion_rate": conversion_rate,
            "cost_per_lead": random.uniform(5, 50),
            "cost_per_conversion": random.uniform(50, 500)
        },
        "success": global_success,
        "feedback": random.choice([
            "Excellente niche avec fort potentiel",
            "Niche moyenne, √† optimiser",
            "R√©sultats d√©cevants, √† abandonner",
            "Prometteur mais n√©cessite plus de donn√©es",
            "Bons r√©sultats initiaux"
        ])
    }

def generate_active_campaign() -> Dict[str, Any]:
    """G√©n√®re une campagne active simul√©e"""
    start_date = datetime.datetime.now() - datetime.timedelta(days=random.randint(1, 20))
    
    # G√©n√©rer des m√©triques de performance al√©atoires pour une campagne en cours
    lead_count = random.randint(5, 50)
    qualified_count = int(lead_count * random.uniform(0.3, 0.8))
    conversion_count = int(qualified_count * random.uniform(0.05, 0.3))
    
    # Calculer les taux
    qualification_rate = qualified_count / lead_count if lead_count > 0 else 0
    conversion_rate = conversion_count / qualified_count if qualified_count > 0 else 0
    
    # Pour une campagne active, on g√©n√®re aussi des tendances
    trend = random.choice(["improving", "stable", "declining"])
    
    return {
        "campaign_id": generate_campaign_id(),
        "niche": random.choice(EXAMPLE_NICHES),
        "location": random.choice(EXAMPLE_LOCATIONS),
        "start_date": start_date.isoformat(),
        "status": "active",
        "metrics": {
            "lead_count": lead_count,
            "qualified_count": qualified_count,
            "conversion_count": conversion_count,
            "qualification_rate": qualification_rate,
            "conversion_rate": conversion_rate,
            "cost_per_lead": random.uniform(5, 50),
            "cost_per_conversion": random.uniform(50, 500)
        },
        "trend": trend,
        "last_update": datetime.datetime.now().isoformat()
    }

def generate_underexplored_niche() -> Dict[str, Any]:
    """G√©n√®re une niche inexploit√©e simul√©e"""
    potential_score = random.uniform(0.5, 0.95)
    competition_level = random.uniform(0.1, 0.8)
    
    # Liste des mots-cl√©s associ√©s
    keywords = []
    for _ in range(random.randint(3, 8)):
        keywords.append(f"keyword_{random.randint(1000, 9999)}")
    
    return {
        "niche": random.choice([n for n in EXAMPLE_NICHES if random.random() > 0.7]),
        "source": random.choice(["keyword_research", "market_analysis", "competitor_intel", "qdrant_similarity"]),
        "potential_score": potential_score,
        "competition_level": competition_level,
        "opportunity_score": potential_score * (1 - competition_level),
        "keywords": keywords,
        "discovery_date": (datetime.datetime.now() - datetime.timedelta(days=random.randint(1, 30))).isoformat()
    }

def simulate_get_campaign_data() -> Tuple[List[Dict[str, Any]], List[Dict[str, Any]]]:
    """Simule la fonction get_campaign_data() de db/postgres.py"""
    # G√©n√©rer des campagnes pass√©es
    past_campaigns = []
    for _ in range(random.randint(5, 15)):
        past_campaigns.append(generate_past_campaign())
    
    # G√©n√©rer des campagnes actives
    active_campaigns = []
    for _ in range(random.randint(1, 5)):
        active_campaigns.append(generate_active_campaign())
    
    return past_campaigns, active_campaigns

def simulate_get_underexplored_niches() -> List[Dict[str, Any]]:
    """Simule la fonction get_underexplored_niches() de memory/qdrant.py"""
    # G√©n√©rer des niches inexploit√©es
    niches = []
    for _ in range(random.randint(3, 10)):
        niches.append(generate_underexplored_niche())
    
    return niches

# Patching des fonctions r√©elles pour utiliser les simulations
def patch_functions():
    """
    Remplace les fonctions r√©elles par des simulations pour les tests
    Cela permet de tester les agents sans n√©cessiter d'acc√®s aux bases de donn√©es
    """
    from db import postgres
    from memory import qdrant
    
    # Sauvegarder les fonctions originales
    original_get_campaign_data = getattr(postgres, 'get_campaign_data', None)
    original_get_underexplored_niches = getattr(qdrant, 'get_underexplored_niches', None)
    
    # Remplacer par les simulations
    postgres.get_campaign_data = simulate_get_campaign_data
    qdrant.get_underexplored_niches = simulate_get_underexplored_niches
    
    print("üîÑ Fonctions de base de donn√©es remplac√©es par des simulations")
    
    # Retourner une fonction pour restaurer les originales
    def restore_functions():
        if original_get_campaign_data:
            postgres.get_campaign_data = original_get_campaign_data
        if original_get_underexplored_niches:
            qdrant.get_underexplored_niches = original_get_underexplored_niches
        print("üîÑ Fonctions de base de donn√©es originales restaur√©es")
    
    return restore_functions
