#!/usr/bin/env python3
"""
Exemple d'int√©gration des capacit√©s de d√©bogage intelligent avec le Decision Brain Agent.

Ce script montre comment √©tendre le Decision Brain Agent pour utiliser les agents
de d√©bogage intelligents afin d'am√©liorer sa capacit√© √† g√©rer les erreurs.
"""

import os
import sys
import json
import logging
import datetime
import colorama
from colorama import Fore, Style

# Ajouter le chemin racine du projet pour l'importation des modules
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# Importer les modules n√©cessaires
from agents.controller.decision_brain_agent import DecisionBrainAgent
from agents.controller.decision_brain_agent_extensions import extend_decision_brain_agent

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("logs/brain_debugging_demo.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("DebuggingDemo")

# Initialiser colorama pour les logs color√©s
colorama.init()

def pretty_print(message, emoji="üí°", color=Fore.CYAN):
    """Affiche un message format√© avec emoji et couleur."""
    formatted = f"{color}{emoji} {message}{Style.RESET_ALL}"
    print(formatted)
    logger.info(message)

def main():
    """Fonction principale de d√©monstration."""
    pretty_print("=== D√âMONSTRATION DE L'INT√âGRATION DU D√âBOGAGE INTELLIGENT ===", 
                emoji="üöÄ", color=Fore.MAGENTA)
    
    try:
        # √âtape 1: Initialiser le Decision Brain Agent standard
        pretty_print("Initialisation du Decision Brain Agent standard...", emoji="üß†")
        brain_agent = DecisionBrainAgent()
        
        # √âtape 2: √âtendre le Decision Brain Agent avec des capacit√©s de d√©bogage
        pretty_print("Ajout des capacit√©s de d√©bogage intelligent...", emoji="üß©")
        debugging_extension = extend_decision_brain_agent(brain_agent)
        
        # √âtape 3: D√©montrer la surveillance proactive des services
        pretty_print("D√©monstration de la surveillance proactive des services...", emoji="üîç")
        service_status = brain_agent.check_and_repair_services(["berinia-api"])
        
        pretty_print(f"R√©sultat de la surveillance: {json.dumps(service_status, indent=2)}", 
                    emoji="üìä", color=Fore.GREEN)
        
        # √âtape 4: D√©montrer la gestion d'erreur intelligente
        pretty_print("D√©monstration de la gestion d'erreur intelligente...", emoji="üîß")
        
        # Simuler une erreur connue de router non d√©fini
        simulated_error = """
        Traceback (most recent call last):
          File "/root/berinia/backend/app/main.py", line 43, in startup
            from app.api.api import api_router
          File "/root/berinia/backend/app/api/api.py", line 5, in <module>
            from app.api.endpoints import campaigns, niches, leads
          File "/root/berinia/backend/app/api/endpoints/campaigns.py", line 15, in <module>
            @router.get("/")
        NameError: name 'router' is not defined
        """
        
        error_result = brain_agent.handle_exception(
            error_message=simulated_error,
            file_path="/root/berinia/backend/app/api/endpoints/campaigns.py",
            service_name="berinia-api"
        )
        
        pretty_print(f"R√©sultat de la gestion d'erreur: {json.dumps(error_result, indent=2)}", 
                    emoji="üõ†Ô∏è", color=Fore.YELLOW)
        
        # √âtape 5: D√©montrer l'enregistrement de feedback
        if "experience_id" in error_result:
            pretty_print("D√©monstration de l'enregistrement de feedback...", emoji="üí¨")
            
            # Simuler un feedback positif de l'humain
            feedback_result = brain_agent._process_debugging_feedback(
                error_result["experience_id"],
                True
            )
            
            pretty_print(f"R√©sultat du feedback: {json.dumps(feedback_result, indent=2)}", 
                        emoji="üëç", color=Fore.GREEN)
        
        # √âtape 6: D√©montrer l'ex√©cution normale de l'agent
        pretty_print("D√©monstration de l'ex√©cution normale du Decision Brain Agent...", emoji="üîÑ")
        brain_result = brain_agent.run({
            "operation": "evaluate_global_strategy"
        })
        
        pretty_print(f"Ex√©cution normale du cerveau termin√©e avec succ√®s: {brain_result.get('execution_time', 0):.2f} secondes", 
                    emoji="‚úÖ", color=Fore.GREEN)
        
        pretty_print("=== D√âMONSTRATION TERMIN√âE AVEC SUCC√àS ===", 
                    emoji="üéâ", color=Fore.MAGENTA)
        
    except Exception as e:
        pretty_print(f"Erreur lors de la d√©monstration: {str(e)}", 
                    emoji="‚ùå", color=Fore.RED)
        logger.exception("Exception non g√©r√©e")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
