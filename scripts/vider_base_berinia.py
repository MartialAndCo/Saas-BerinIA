#!/usr/bin/env python3
"""
Script simple pour vider la base de donn√©es Berinia.
"""

import os
import sys
import logging
from datetime import datetime

# Ajouter le r√©pertoire racine au chemin Python
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

# Importer les modules de base de donn√©es
try:
    from sqlalchemy import create_engine, text
    from integrations.berinia.db_connector import DB_URL, test_berinia_connection
except ImportError as e:
    print(f"‚ùå Erreur d'importation: {str(e)}")
    sys.exit(1)

def vider_base_berinia():
    """Vide simplement tous les leads de la base de donn√©es."""
    print("\n=== VIDAGE DE LA BASE DE DONN√âES BERINIA ===")
    print(f"üìÖ Date: {datetime.now().isoformat()}")
    
    # V√©rifier la connexion
    print("üîç Test de connexion √† la base de donn√©es...")
    if not test_berinia_connection():
        print("‚ùå √âchec de la connexion √† la base de donn√©es")
        return False
    
    print("‚úÖ Connexion r√©ussie")
    
    # Cr√©er une connexion
    engine = create_engine(DB_URL)
    
    try:
        with engine.connect() as conn:
            # Vider la table des leads
            print("üßπ Suppression de tous les leads...")
            result = conn.execute(text("DELETE FROM leads"))
            conn.commit()
            print(f"‚úÖ {result.rowcount} leads supprim√©s avec succ√®s")
            return True
    except Exception as e:
        print(f"‚ùå Erreur lors du vidage de la base: {str(e)}")
        return False

if __name__ == "__main__":
    success = vider_base_berinia()
    
    if success:
        print("\n‚úÖ Base de donn√©es vid√©e avec succ√®s")
        print("üöÄ Pour red√©marrer le syst√®me avec une base propre, lancez:")
        print("python3 start_brain_agent.py")
    else:
        print("\n‚ùå √âchec du vidage de la base de donn√©es")
