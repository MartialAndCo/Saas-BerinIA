#!/usr/bin/env python3
"""
Script pour corriger l'erreur de validation dans les campagnes Berinia.
L'erreur se produit car le champ 'leads' contient des objets Lead au lieu d'entiers.
"""

import os
import sys
import logging
from datetime import datetime

# Ajouter le r√©pertoire racine au chemin Python
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

# Configurer logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("berinia-campaign-fix")

try:
    # Importer les modules n√©cessaires
    from sqlalchemy import create_engine, text
    
    # Importer la configuration de la base de donn√©es depuis le module d'int√©gration Berinia
    from integrations.berinia.db_connector import (
        DB_URL, 
        BERINIA_AVAILABLE,
        test_berinia_connection
    )

    if not BERINIA_AVAILABLE:
        logger.error("‚ùå Module d'int√©gration Berinia non disponible. Correction impossible.")
        sys.exit(1)
        
except ImportError as e:
    logger.error(f"‚ùå Impossible d'importer les modules n√©cessaires: {str(e)}")
    sys.exit(1)

def fix_campaign_leads():
    """
    Corrige les campagnes en r√©parant la relation avec les leads.
    """
    print(f"\n{'='*40}")
    print(f"üîß CORRECTION DES CAMPAGNES BERINIA")
    print(f"üïí Date et heure: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"{'='*40}\n")
    
    # Tester la connexion √† la base de donn√©es
    print("üîç Test de la connexion √† la base de donn√©es...")
    if not test_berinia_connection():
        print("‚ùå √âchec de la connexion √† la base de donn√©es. Abandon.")
        return False
        
    print("‚úÖ Connexion √† la base de donn√©es r√©ussie.")
    
    try:
        # Cr√©er une connexion √† la base de donn√©es
        engine = create_engine(DB_URL)
        
        with engine.connect() as conn:
            # Commencer une transaction
            trans = conn.begin()
            try:
                # 1. V√©rification de la structure de la table leads
                print("üîç V√©rification de la structure de la table leads...")
                columns = conn.execute(text("SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'leads'")).fetchall()
                leads_columns = {col[0]: col[1] for col in columns}
                
                print(f"‚úÖ Structure de la table leads: {leads_columns}")
                
                # 2. V√©rification de la structure de la table campaigns
                print("üîç V√©rification de la structure de la table campaigns...")
                columns = conn.execute(text("SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'campaigns'")).fetchall()
                campaigns_columns = {col[0]: col[1] for col in columns}
                
                print(f"‚úÖ Structure de la table campaigns: {campaigns_columns}")
                
                # 3. Correction: s'assurer que les leads r√©f√©rencent correctement les campagnes
                print("üîß Correction des r√©f√©rences entre leads et campaigns...")
                
                # R√©cup√©rer toutes les campagnes
                campaigns = conn.execute(text("SELECT id, nom FROM campaigns")).fetchall()
                print(f"üìã {len(campaigns)} campagnes trouv√©es.")
                
                # Pour chaque campagne, v√©rifier et corriger les leads associ√©s
                for campaign in campaigns:
                    campaign_id = campaign[0]
                    campaign_name = campaign[1]
                    
                    # Compter les leads associ√©s √† cette campagne
                    lead_count = conn.execute(
                        text("SELECT COUNT(*) FROM leads WHERE campagne_id = :campaign_id"),
                        {"campaign_id": campaign_id}
                    ).scalar()
                    
                    print(f"üìä Campagne {campaign_name} (ID: {campaign_id}): {lead_count} leads associ√©s")
                    
                    # Correction des relations (si n√©cessaire)
                    if 'leads' in campaigns_columns and campaigns_columns['leads'] != 'integer':
                        # Si la colonne leads existe et n'est pas de type integer
                        print(f"üîß Correction de la structure de la colonne 'leads' dans la table campaigns...")
                        
                        # Solution: Renommer la colonne probl√©matique et cr√©er une nouvelle colonne correcte
                        try:
                            # Renommer la colonne probl√©matique
                            conn.execute(text("ALTER TABLE campaigns RENAME COLUMN leads TO leads_old"))
                            
                            # Cr√©er une nouvelle colonne de type integer
                            conn.execute(text("ALTER TABLE campaigns ADD COLUMN leads integer"))
                            
                            # Mettre √† jour la nouvelle colonne avec le nombre de leads
                            conn.execute(text("""
                                UPDATE campaigns c
                                SET leads = (SELECT COUNT(*) FROM leads l WHERE l.campagne_id = c.id)
                            """))
                            
                            print("‚úÖ Colonne 'leads' corrig√©e avec succ√®s.")
                        except Exception as e:
                            print(f"‚ùå Erreur lors de la correction de la colonne 'leads': {str(e)}")
                    else:
                        # Si la colonne leads n'existe pas, la cr√©er
                        if 'leads' not in campaigns_columns:
                            print(f"üîß Cr√©ation de la colonne 'leads' dans la table campaigns...")
                            conn.execute(text("ALTER TABLE campaigns ADD COLUMN leads integer"))
                            
                            # Mettre √† jour la nouvelle colonne avec le nombre de leads
                            conn.execute(text("""
                                UPDATE campaigns c
                                SET leads = (SELECT COUNT(*) FROM leads l WHERE l.campagne_id = c.id)
                            """))
                            
                            print("‚úÖ Colonne 'leads' cr√©√©e avec succ√®s.")
                        else:
                            # Mise √† jour du compteur de leads (pour s'assurer qu'il est correct)
                            conn.execute(text("""
                                UPDATE campaigns c
                                SET leads = (SELECT COUNT(*) FROM leads l WHERE l.campagne_id = c.id)
                            """))
                            
                            print("‚úÖ Compteur de leads mis √† jour.")
                
                # Valider la transaction
                trans.commit()
                print("\n‚úÖ Correction des campagnes termin√©e avec succ√®s.")
                return True
                
            except Exception as e:
                # Annuler la transaction en cas d'erreur
                trans.rollback()
                print(f"‚ùå Erreur lors de la correction des campagnes: {str(e)}")
                return False
                
    except Exception as e:
        print(f"‚ùå Erreur lors de la connexion √† la base de donn√©es: {str(e)}")
        return False

if __name__ == "__main__":
    success = fix_campaign_leads()
    
    if success:
        print("\nüöÄ Pour red√©marrer le syst√®me avec les campagnes corrig√©es, ex√©cutez:")
        print("python3 start_brain_agent.py")
        sys.exit(0)
    else:
        print("\n‚ùå La correction a √©chou√©.")
        sys.exit(1)
