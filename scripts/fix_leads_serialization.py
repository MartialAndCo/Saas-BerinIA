#!/usr/bin/env python3
"""
Script pour corriger le probl√®me de s√©rialisation des leads dans les API routes de Berinia.
L'erreur indique que la r√©ponse contient directement des objets Lead au lieu d'entiers.
"""

import os
import sys
import logging
from datetime import datetime
import inspect
import importlib.util
from pathlib import Path

# Ajouter le r√©pertoire racine au chemin Python
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

# Configurer logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("berinia-api-fix")

# Chemins vers les fichiers Berinia
BERINIA_BACKEND_PATH = os.getenv("BERINIA_BACKEND_PATH", "/root/berinia/backend")
API_ROUTES_DIR = os.path.join(BERINIA_BACKEND_PATH, "app", "api", "endpoints")
BERINIA_API_DIR = os.path.join(BERINIA_BACKEND_PATH, "app", "api")
BERINIA_SCHEMAS_DIR = os.path.join(BERINIA_BACKEND_PATH, "app", "schemas")

def is_berinia_available():
    """V√©rifie si les r√©pertoires de Berinia sont accessibles"""
    if not os.path.exists(BERINIA_BACKEND_PATH):
        logger.error(f"‚ùå Chemin backend Berinia introuvable: {BERINIA_BACKEND_PATH}")
        return False
    if not os.path.exists(API_ROUTES_DIR):
        logger.error(f"‚ùå R√©pertoire des routes API introuvable: {API_ROUTES_DIR}")
        return False
    return True

def find_lead_related_files():
    """
    Recherche les fichiers li√©s aux leads et √† la s√©rialisation dans le backend Berinia
    """
    lead_files = []
    
    # Chercher dans les routes API
    for root, dirs, files in os.walk(API_ROUTES_DIR):
        for file in files:
            if file.endswith(".py"):
                filepath = os.path.join(root, file)
                with open(filepath, 'r') as f:
                    content = f.read()
                    if 'lead' in content.lower() or 'Lead' in content:
                        lead_files.append(filepath)
    
    # Chercher les sch√©mas de leads
    for root, dirs, files in os.walk(BERINIA_SCHEMAS_DIR):
        for file in files:
            if file.endswith(".py") and ('lead' in file.lower() or 'response' in file.lower()):
                filepath = os.path.join(root, file)
                lead_files.append(filepath)
    
    return lead_files

def inspect_file_content(filepath):
    """
    Analyse le contenu d'un fichier pour comprendre comment les leads sont trait√©s
    """
    print(f"\nüìÑ Analyse de {os.path.relpath(filepath, BERINIA_BACKEND_PATH)}")
    
    with open(filepath, 'r') as f:
        content = f.read()
        
    # Rechercher des patterns sp√©cifiques li√©s √† la s√©rialisation des leads
    patterns = {
        "route_def": ["@router.get", "@router.post", "@app.get", "@app.post"],
        "lead_model": ["Lead(", "List[Lead]", "LeadCreate", "LeadResponse"],
        "response_model": ["response_model=", "ResponseModel"],
        "serialize": ["jsonable_encoder", "model_dump", "to_dict", "serialize"]
    }
    
    findings = {}
    for category, search_terms in patterns.items():
        lines = []
        for term in search_terms:
            for i, line in enumerate(content.split('\n')):
                if term in line:
                    lines.append((i+1, line.strip()))
        if lines:
            findings[category] = lines
    
    # Afficher les r√©sultats
    if findings:
        for category, lines in findings.items():
            print(f"  üîç {category.upper()}:")
            for line_num, line in lines:
                print(f"    Ligne {line_num}: {line}")
    else:
        print("  ‚ö†Ô∏è Aucun pattern pertinent trouv√©")
    
    return findings

def fix_response_model(filepath):
    """
    Corrige les probl√®mes de s√©rialisation dans les fichiers de r√©ponse
    """
    # Lire le fichier
    with open(filepath, 'r') as f:
        content = f.read()
        original_content = content
    
    # Identifier les patterns de probl√®mes courants
    fixes_made = []
    
    # Cas 1: Direct inclusion of Lead objects in response
    if "response: List[Lead]" in content or "response: List[models.Lead]" in content:
        content = content.replace("response: List[Lead]", "response: List[int]")
        content = content.replace("response: List[models.Lead]", "response: List[int]")
        fixes_made.append("Correction du typage des listes de leads (List[Lead] -> List[int])")
    
    # Cas 2: Returning Lead objects directly
    lead_return_patterns = [
        "return leads",
        "return db_leads",
        "return [lead for lead",
        "return await leads",
        "return {"
    ]
    
    for pattern in lead_return_patterns:
        if pattern in content:
            # Analyse plus d√©taill√©e requise
            lines = content.split('\n')
            modified_lines = []
            
            for i, line in enumerate(lines):
                if pattern in line and ("lead" in line.lower() or "campaign" in line.lower()):
                    # V√©rifier s'il faut ajouter un code de s√©rialisation
                    context_lines = lines[max(0, i-5):i] + [line] + lines[i+1:min(len(lines), i+5)]
                    context = '\n'.join(context_lines)
                    
                    # Si on retourne directement une liste d'objets sans s√©rialisation
                    if (pattern == "return leads" or pattern == "return db_leads") and "jsonable_encoder" not in context and "model_dump" not in context:
                        indent = len(line) - len(line.lstrip())
                        spaces = ' ' * indent
                        
                        # Ajouter une fonction de s√©rialisation
                        if "return [" in line:
                            serialized_line = line.replace("return [", f"return [{spaces}lead.id for ")
                            modified_lines.append(serialized_line)
                            fixes_made.append(f"Ajout de s√©rialisation par ID √† la ligne {i+1}")
                        else:
                            modified_lines.append(f"{spaces}# S√©rialiser les leads par ID")
                            modified_lines.append(f"{spaces}lead_ids = [lead.id for lead in {pattern.replace('return ', '')}]")
                            modified_lines.append(f"{spaces}return lead_ids")
                            fixes_made.append(f"Remplacement de la r√©ponse par des IDs de lead √† la ligne {i+1}")
                        continue
                    
                    # Si on retourne un dict avec des objets leads
                    elif pattern == "return {" and ("'leads'" in context or '"leads"' in context):
                        # On va devoir analyser et modifier cette section plus en d√©tail
                        in_response_block = False
                        response_block_lines = []
                        
                        for j in range(i, min(len(lines), i+20)):
                            line_j = lines[j]
                            if pattern in line_j and not in_response_block:
                                in_response_block = True
                                response_block_lines.append(line_j)
                            elif in_response_block:
                                if "}" in line_j and line_j.strip() == "}":
                                    # Fin du bloc de r√©ponse
                                    response_block_lines.append(line_j)
                                    break
                                elif "'leads'" in line_j or '"leads"' in line_j:
                                    # Ligne avec la cl√© 'leads', √† modifier
                                    if ":" in line_j:
                                        key_part = line_j.split(":")[0]
                                        indent = len(line_j) - len(line_j.lstrip())
                                        spaces = ' ' * indent
                                        # Remplacer par une liste d'IDs
                                        response_block_lines.append(f"{spaces}{key_part}: [lead.id for lead in leads],")
                                        fixes_made.append(f"Conversion des objets leads en liste d'IDs √† la ligne {j+1}")
                                    else:
                                        response_block_lines.append(line_j)
                                else:
                                    response_block_lines.append(line_j)
                        
                        if response_block_lines:
                            # Remplacer le bloc original par notre version corrig√©e
                            response_block = '\n'.join(response_block_lines)
                            start_line = i
                            end_line = i + len(response_block_lines)
                            
                            # Ajouter les lignes avant ce bloc
                            modified_lines.extend(lines[:start_line])
                            # Ajouter notre bloc corrig√©
                            modified_lines.append(response_block)
                            # On va sauter √† la fin du bloc
                            i = end_line - 1
                            continue
                
                # Ligne sans modification
                modified_lines.append(line)
            
            # Mettre √† jour le contenu si des modifications ont √©t√© apport√©es
            if modified_lines:
                content = '\n'.join(modified_lines)
    
    # Enregistrer les modifications si des corrections ont √©t√© apport√©es
    if fixes_made and content != original_content:
        backup_path = f"{filepath}.bak"
        os.rename(filepath, backup_path)
        
        with open(filepath, 'w') as f:
            f.write(content)
        
        print(f"\n‚úÖ Corrections apport√©es au fichier {os.path.relpath(filepath, BERINIA_BACKEND_PATH)}:")
        for fix in fixes_made:
            print(f"  - {fix}")
        print(f"üìã Sauvegarde du fichier original: {os.path.relpath(backup_path, BERINIA_BACKEND_PATH)}")
        return True
    else:
        print(f"\n‚ö†Ô∏è Aucune correction n√©cessaire dans {os.path.relpath(filepath, BERINIA_BACKEND_PATH)}")
        return False

def fix_schema_model(filepath):
    """
    Corrige les d√©finitions de sch√©mas Pydantic pour les r√©ponses contenant des leads
    """
    # Lire le fichier
    with open(filepath, 'r') as f:
        content = f.read()
        original_content = content
    
    # Identifier les sch√©mas de r√©ponse qui pourraient retourner des objets Lead directement
    schema_fixes = []
    lines = content.split('\n')
    modified_lines = []
    
    in_response_class = False
    current_class_name = ""
    i = 0
    
    while i < len(lines):
        line = lines[i]
        
        # Trouver les d√©finitions de classe
        if line.strip().startswith("class ") and "Response" in line and "(" in line:
            class_def = line.strip()
            current_class_name = class_def.split("class ")[1].split("(")[0].strip()
            in_response_class = True
            modified_lines.append(line)
        
        # Analyser l'int√©rieur des classes de r√©ponse
        elif in_response_class:
            if line.strip().startswith("class ") or not line.strip():
                # Fin de la classe courante
                in_response_class = False
                current_class_name = ""
                modified_lines.append(line)
            elif "leads:" in line or "lead:" in line:
                # Analyser la d√©finition du champ leads
                if ("List[Lead]" in line or "List[models.Lead]" in line or 
                    "Lead " in line or "models.Lead" in line):
                    # Corriger pour utiliser des IDs √† la place
                    indent = len(line) - len(line.lstrip())
                    spaces = ' ' * indent
                    
                    if "List[" in line:
                        corrected_line = line.replace("List[Lead]", "List[int]")
                        corrected_line = corrected_line.replace("List[models.Lead]", "List[int]")
                        schema_fixes.append(f"Correction du typage List[Lead] en List[int] dans {current_class_name}")
                    else:
                        corrected_line = line.replace("Lead ", "int ")
                        corrected_line = corrected_line.replace("models.Lead", "int")
                        schema_fixes.append(f"Correction du typage Lead en int dans {current_class_name}")
                    
                    modified_lines.append(corrected_line)
                else:
                    modified_lines.append(line)
            else:
                modified_lines.append(line)
        else:
            modified_lines.append(line)
        
        i += 1
    
    # Enregistrer les modifications si des corrections ont √©t√© apport√©es
    content = '\n'.join(modified_lines)
    if schema_fixes and content != original_content:
        backup_path = f"{filepath}.bak"
        os.rename(filepath, backup_path)
        
        with open(filepath, 'w') as f:
            f.write(content)
        
        print(f"\n‚úÖ Corrections apport√©es au sch√©ma {os.path.relpath(filepath, BERINIA_BACKEND_PATH)}:")
        for fix in schema_fixes:
            print(f"  - {fix}")
        print(f"üìã Sauvegarde du fichier original: {os.path.relpath(backup_path, BERINIA_BACKEND_PATH)}")
        return True
    else:
        print(f"\n‚ö†Ô∏è Aucune correction n√©cessaire dans le sch√©ma {os.path.relpath(filepath, BERINIA_BACKEND_PATH)}")
        return False

def clean_and_restart_api():
    """
    Red√©marre l'API Berinia apr√®s avoir effectu√© les modifications
    """
    # Chemin du script de d√©marrage Berinia (√† adapter)
    berinia_start_script = os.path.join(BERINIA_BACKEND_PATH, "start.sh")
    
    if os.path.exists(berinia_start_script):
        print("\nüîÑ Red√©marrage de l'API Berinia...")
        os.system(f"bash {berinia_start_script}")
        print("‚úÖ API Berinia red√©marr√©e")
    else:
        print("\n‚ö†Ô∏è Script de d√©marrage Berinia non trouv√©")
        print(f"Pour red√©marrer l'API, ex√©cutez manuellement le script dans {BERINIA_BACKEND_PATH}")

def fix_api_leads_serialization():
    """
    Fonction principale pour corriger les probl√®mes de s√©rialisation des leads dans l'API
    """
    print(f"\n{'='*40}")
    print(f"üîß CORRECTION DE LA S√âRIALISATION DES LEADS DANS L'API BERINIA")
    print(f"üïí Date et heure: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"{'='*40}\n")
    
    if not is_berinia_available():
        print("‚ùå Backend Berinia non disponible. Abandon.")
        return False
    
    print("üîç Recherche des fichiers li√©s aux leads dans l'API...")
    lead_files = find_lead_related_files()
    
    if not lead_files:
        print("‚ùå Aucun fichier pertinent trouv√©. V√©rifiez les chemins d'acc√®s.")
        return False
    
    print(f"‚úÖ {len(lead_files)} fichiers identifi√©s pour analyse")
    
    # Phase 1: Analyse des fichiers
    print("\nüìä PHASE 1: ANALYSE DES FICHIERS")
    file_analysis = {}
    for filepath in lead_files:
        findings = inspect_file_content(filepath)
        file_analysis[filepath] = findings
    
    # Phase 2: Correction des fichiers concern√©s
    print("\nüîß PHASE 2: CORRECTION DES FICHIERS")
    fixes_performed = 0
    
    # D'abord corriger les sch√©mas
    schema_files = [f for f in lead_files if "/schemas/" in f]
    for filepath in schema_files:
        if fix_schema_model(filepath):
            fixes_performed += 1
    
    # Ensuite corriger les routes API
    api_files = [f for f in lead_files if "/api/" in f and "endpoints" in f]
    for filepath in api_files:
        if fix_response_model(filepath):
            fixes_performed += 1
    
    # Phase 3: Nettoyage et red√©marrage
    if fixes_performed > 0:
        print(f"\n‚úÖ {fixes_performed} fichiers corrig√©s")
        
        # Red√©marrer l'API
        clean_and_restart_api()
        
        print("\nüöÄ Pour tester les corrections dans le syst√®me infra-ia:")
        print("python3 start_brain_agent.py")
        return True
    else:
        print("\n‚ö†Ô∏è Aucune correction appliqu√©e")
        print("Il est possible que les probl√®mes de s√©rialisation soient situ√©s dans des emplacements non analys√©s.")
        print("V√©rifiez manuellement le code des API endpoints et des sch√©mas dans le backend Berinia.")
        return False

def examine_berinia_api_source():
    """Affiche des informations sur les chemins d'acc√®s aux fichiers Berinia"""
    print(f"\n{'='*40}")
    print(f"üìÇ INFORMATIONS SUR LES CHEMINS D'ACC√àS AU BACKEND BERINIA")
    print(f"{'='*40}\n")
    
    print(f"Chemin backend Berinia: {BERINIA_BACKEND_PATH}")
    print(f"R√©pertoire API: {BERINIA_API_DIR}")
    print(f"R√©pertoire des routes API: {API_ROUTES_DIR}")
    print(f"R√©pertoire des sch√©mas: {BERINIA_SCHEMAS_DIR}")
    
    # V√©rifier l'existence des r√©pertoires
    for path, name in [
        (BERINIA_BACKEND_PATH, "Backend Berinia"),
        (BERINIA_API_DIR, "API Berinia"),
        (API_ROUTES_DIR, "Routes API"),
        (BERINIA_SCHEMAS_DIR, "Sch√©mas")
    ]:
        if os.path.exists(path):
            print(f"‚úÖ {name} trouv√©: {path}")
            
            # Lister quelques fichiers pour confirmation
            if os.path.isdir(path):
                files = os.listdir(path)
                print(f"   üìÑ Fichiers ({min(3, len(files))} sur {len(files)}):")
                for file in files[:3]:
                    print(f"      - {file}")
        else:
            print(f"‚ùå {name} introuvable: {path}")
    
    # Essayer de trouver des fichiers d'API endpoints sp√©cifiques
    for root, dirs, files in os.walk(BERINIA_BACKEND_PATH):
        api_endpoints = [f for f in files if f.endswith(".py") and ("api" in root.lower() or "route" in root.lower())]
        if api_endpoints:
            print(f"\nüìÅ Endpoints API trouv√©s dans: {root}")
            print(f"   üìÑ Fichiers d'API ({min(5, len(api_endpoints))} sur {len(api_endpoints)}):")
            for file in api_endpoints[:5]:
                print(f"      - {file}")
            # Ne montrer que le premier dossier contenant des endpoints
            break

def find_and_fix_model_code():
    """
    Recherche et modifie les mod√®les et les routes qui g√®rent la campagne et les leads
    """
    print(f"\n{'='*40}")
    print(f"üîç RECHERCHE ET MODIFICATION DES MOD√àLES ET ROUTES")
    print(f"{'='*40}\n")
    
    if not is_berinia_available():
        print("‚ùå Backend Berinia non disponible. Abandon.")
        return False
    
    # 1. Rechercher les fichiers contenant "campaign" et "lead" dans le dossier des mod√®les
    models_dir = os.path.join(BERINIA_BACKEND_PATH, "app", "models")
    if not os.path.exists(models_dir):
        print(f"‚ùå R√©pertoire des mod√®les introuvable: {models_dir}")
        return False
    
    campaigns_model_path = None
    leads_model_path = None
    
    for root, dirs, files in os.walk(models_dir):
        for file in files:
            if file.endswith(".py"):
                filepath = os.path.join(root, file)
                with open(filepath, 'r') as f:
                    content = f.read()
                    if "campaign" in content.lower() or "Campaign" in content:
                        campaigns_model_path = filepath
                        print(f"‚úÖ Mod√®le de campagne trouv√©: {os.path.relpath(filepath, BERINIA_BACKEND_PATH)}")
                    if "lead" in content.lower() or "Lead" in content:
                        leads_model_path = filepath
                        print(f"‚úÖ Mod√®le de lead trouv√©: {os.path.relpath(filepath, BERINIA_BACKEND_PATH)}")
    
    # 2. Analyser le mod√®le de campagne pour comprendre la relation avec les leads
    if campaigns_model_path:
        with open(campaigns_model_path, 'r') as f:
            content = f.read()
            print("\nüìÑ Analyse du mod√®le de campagne:")
            
            # Chercher les relations avec les leads
            relationship_lines = []
            for i, line in enumerate(content.split("\n")):
                if "relationship" in line.lower() and "lead" in line.lower():
                    relationship_lines.append((i+1, line.strip()))
                elif "lead" in line.lower() and ("column" in line.lower() or ":" in line):
                    relationship_lines.append((i+1, line.strip()))
            
            if relationship_lines:
                print("  üîç Relations avec les leads:")
                for line_num, line in relationship_lines:
                    print(f"    Ligne {line_num}: {line}")
                
                # Si on trouve des relations, on modifie le mod√®le pour utiliser les IDs des leads
                if "relationship" in ''.join([line for _, line in relationship_lines]):
                    with open(campaigns_model_path, 'r') as f:
                        model_content = f.read()
                        original_content = model_content
                    
                    # Chercher et modifier les relations
                    lines = model_content.split('\n')
                    modified_lines = []
                    fixed = False
                    
                    for i, line in enumerate(lines):
                        if "relationship" in line.lower() and "lead" in line.lower():
                            # Modifier la relation pour renvoyer des IDs au lieu d'objets
                            # Par exemple: relationship("Lead", back_populates="campaign")
                            # => relationship("Lead", back_populates="campaign", lazy="selectin")
                            if "lazy" not in line:
                                indent = len(line) - len(line.lstrip())
                                spaces = ' ' * indent
                                if ")" in line:
                                    modified_line = line.replace(")", ", lazy='selectin')")
                                    modified_lines.append(modified_line)
                                    fixed = True
                                    print(f"  ‚úÖ Modification de la relation lead (lazy loading): Ligne {i+1}")
                                else:
                                    modified_lines.append(line)
                            else:
                                modified_lines.append(line)
                        else:
                            modified_lines.append(line)
                    
                    if fixed:
                        # Sauvegarder les modifications
                        backup_path = f"{campaigns_model_path}.bak"
                        os.rename(campaigns_model_path, backup_path)
                        
                        with open(campaigns_model_path, 'w') as f:
                            f.write('\n'.join(modified_lines))
                        
                        print(f"‚úÖ Modifications appliqu√©es au mod√®le de campagne")
                        print(f"üìã Sauvegarde du fichier original: {os.path.relpath(backup_path, BERINIA_BACKEND_PATH)}")
                    else:
                        print("‚ö†Ô∏è Aucune modification n√©cessaire pour le mod√®le de campagne")
            else:
                print("  ‚ö†Ô∏è Aucune relation avec les leads trouv√©e dans le mod√®le de campagne")
    
    # 3. Chercher et corriger les routes API qui retournent des campagnes avec des leads
    endpoints_dir = os.path.join(BERINIA_BACKEND_PATH, "app", "api", "endpoints")
    if not os.path.exists(endpoints_dir):
        print(f"‚ùå R√©pertoire des endpoints introuvable: {endpoints_dir}")
    else:
        print("\nüîç Recherche des endpoints de campagne...")
        campaign_endpoints = []
        
        for root, dirs, files in os.walk(endpoints_dir):
            for file in files:
                if file.endswith(".py"):
                    filepath = os.path.join(root, file)
                    with open(filepath, 'r') as f:
                        content = f.read()
                        if ("campaign" in content.lower() or "Campaign" in content) and "router" in content:
                            campaign_endpoints.append(filepath)
                            print(f"‚úÖ Endpoint de campagne trouv√©: {os.path.relpath(filepath, BERINIA_BACKEND_PATH)}")
        
        for endpoint in campaign_endpoints:
            print(f"\nüìÑ Analyse de l'endpoint: {os.path.relpath(endpoint, BERINIA_BACKEND_PATH)}")
            with open(endpoint, 'r') as f:
                content = f.read()
                original_content = content
            
            # Chercher les fonctions qui retournent des campagnes
            lines = content.split('\n')
            functions = []
            current_function = []
            in_function = False
            
            for i, line in enumerate(lines):
                if line.strip().startswith("def ") and "campaign" in line.lower():
                    if current_function:
                        functions.append(current_function)
                    current_function = [i]
                    in_function = True
                elif in_function:
                    if line.strip().startswith("def ") or (not line.strip() and i < len(lines)-1 and lines[i+1].strip().startswith("def ")):
                        functions.append(current_function)
                        current_function = []
                        in_function = False
                    else:
                        current_function.append(i)
            
            if current_function:
                functions.append(current_function)
            
            # Analyser les fonctions qui retournent des campagnes avec des leads
            modified_lines = lines.copy()
            modifications_made = False
            
            for function in functions:
                function_lines = [lines[i] for i in function]
                function_text = '\n'.join(function_lines)
                
                # Chercher les retours de campagne qui incluent des leads
                if "lead" in function_text.lower() and "return" in function_text:
                    # Trouver le nom de la fonction
                    func_name = ""
                    for line in function_lines:
                        if line.strip().startswith("def "):
                            func_name = line.strip().split("def ")[1].split("(")[0].strip()
                            break
                    
                    print(f"  üîç Fonction {func_name} peut retourner des campagnes avec leads")
                    
                    # Chercher les retours qui incluent directement des objets Lead
                    for i in function:
                        line = lines[i]
                        if "return" in line and not "return_" in line:
                            # Si on retourne un dictionnaire ou une liste
                            if ("{" in line or "[" in line) and "leads" in line:
                                # On inspecte le bloc de retour en entier
                                return_block_start = i
                                return_block_end = i
                                brace_count = 0
                                
                                # Calculer le nombre d'accolades/crochets ouverts et ferm√©s
                                for j in range(i, min(len(lines), i+20)):
                                    line_j = lines[j]
                                    brace_count += line_j.count("{") + line_j.count("[")
                                    brace_count -= line_j.count("}") + line_j.count("]")
                                    
                                    if brace_count == 0 and j > i:
                                        return_block_end = j
                                        break
                                
                                # Analyser le bloc de retour
                                return_block = lines[return_block_start:return_block_end+1]
                                return_text = '\n'.join(return_block)
                                
                                # Si le bloc contient des leads, il faut le modifier
                                if "leads" in return_text and not "lead_ids" in return_text:
                                    print(f"  üîß Correction du bloc de retour ligne {return_block_start+1}-{return_block_end+1}")
                                    
                                    # Deux approches possibles :
                                    # 1. Si le bloc est simple, on remplace les leads par leurs IDs
                                    # 2. Si le bloc est complexe, on ajoute une transformation avant le retour
                                    
                                    # On va ins√©rer une transformation avant le bloc de retour
                                    indent = len(lines[return_block_start]) - len(lines[return_block_start].lstrip())
                                    spaces = ' ' * indent
                                    lead_transform = f"{spaces}# Transformation des leads en IDs pour √©viter l'erreur de s√©rialisation\n"
                                    lead_transform += f"{spaces}if 'leads' in locals() and leads:\n"
                                    lead_transform += f"{spaces}    lead_ids = [lead.id for lead in leads]\n"
                                    
                                    # Modifier le bloc de retour pour utiliser lead_ids
                                    modified_return_block = []
                                    for line_j in return_block:
                                        if "'leads'" in line_j or '"leads"' in line_j:
                                            # Remplacer la r√©f√©rence aux leads par lead_ids
                                            if ":" in line_j:
                                                key_part = line_j.split(":")[0]
                                                indent_j = len(line_j) - len(line_j.lstrip())
                                                spaces_j = ' ' * indent_j
                                                modified_return_block.append(f"{spaces_j}{key_part}: lead_ids,")
                                                modifications_made = True
                                            else:
                                                modified_return_block.append(line_j)
                                        else:
                                            modified_return_block.append(line_j)
                                    
                                    # Mise √† jour des lignes
                                    for j in range(return_block_start, return_block_end+1):
                                        modified_lines[j] = ""  # Effacer les lignes originales
                                    
                                    # Ins√©rer la transformation et le bloc modifi√©
                                    modified_lines[return_block_start] = lead_transform
                                    for idx, line_j in enumerate(modified_return_block):
                                        modified_lines.insert(return_block_start + 1 + idx, line_j)
                                    
                                    print(f"  ‚úÖ Ajout d'une transformation des leads en IDs avant le retour")
            
            # Appliquer les modifications si n√©cessaire
            if modifications_made:
                backup_path = f"{endpoint}.bak"
                os.rename(endpoint, backup_path)
                
                with open(endpoint, 'w') as f:
                    f.write('\n'.join(modified_lines))
                
                print(f"‚úÖ Corrections appliqu√©es √† l'endpoint: {os.path.relpath(endpoint, BERINIA_BACKEND_PATH)}")
                print(f"üìã Sauvegarde du fichier original: {os.path.relpath(backup_path, BERINIA_BACKEND_PATH)}")
    
    return True

if __name__ == "__main__":
    print(f"\n{'='*40}")
    print(f"üîß UTILITAIRE DE CORRECTION DES LEADS DANS L'API BERINIA")
    print(f"üïí Date et heure: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"{'='*40}\n")
    
    # V√©rifier le chemin d'acc√®s √† Berinia
    if not is_berinia_available():
        print("‚ùå Backend Berinia non disponible.")
        print(f"Le chemin d√©fini est: {BERINIA_BACKEND_PATH}")
        print("Vous pouvez modifier ce chemin en d√©finissant la variable d'environnement BERINIA_BACKEND_PATH")
        print("Par exemple: export BERINIA_BACKEND_PATH=/chemin/vers/berinia/backend")
        sys.exit(1)
    
    print("üìÇ Inspections des chemins d'acc√®s au backend Berinia...")
    examine_berinia_api_source()
    
    print("\nüîç Analyse des mod√®les et des relations...")
    find_and_fix_model_code()
    
    print("\nüîß Correction des endpoints API...")
    fix_api_leads_serialization()
    
    print("\n‚úÖ Op√©rations termin√©es.")
    print("\nüöÄ Pour red√©marrer le syst√®me avec les corrections, ex√©cutez:")
    print("python3 start_brain_agent.py")
