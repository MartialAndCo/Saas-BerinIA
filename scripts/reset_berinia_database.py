#!/usr/bin/env python3
"""
Script pour r√©initialiser la base de donn√©es Berinia.
Ce script supprime tous les leads et r√©initialise les s√©quences d'identifiants.
"""

import os
import sys
import logging
from datetime import datetime

# Ajouter le r√©pertoire racine au chemin Python
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

# Configurer logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("berinia-reset")

try:
    # Importer les modules n√©cessaires
    from sqlalchemy import create_engine, text
    
    # Importer la configuration de la base de donn√©es depuis le module d'int√©gration Berinia
    from integrations.berinia.db_connector import (
        DB_URL, 
        BERINIA_AVAILABLE,
        test_berinia_connection
    )

    if not BERINIA_AVAILABLE:
        logger.error("‚ùå Module d'int√©gration Berinia non disponible. R√©initialisation impossible.")
        sys.exit(1)
        
except ImportError as e:
    logger.error(f"‚ùå Impossible d'importer les modules n√©cessaires: {str(e)}")
    sys.exit(1)

def reset_berinia_database(preserve_campaigns=True):
    """
    R√©initialise la base de donn√©es Berinia en supprimant les leads et en r√©initialisant les s√©quences.
    
    Args:
        preserve_campaigns: Si True, conserve les campagnes existantes. Sinon, supprime √©galement les campagnes.
    """
    print(f"\n{'='*40}")
    print(f"üßπ R√âINITIALISATION DE LA BASE DE DONN√âES BERINIA")
    print(f"üïí Date et heure: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"{'='*40}\n")
    
    # Tester la connexion √† la base de donn√©es
    print("üîç Test de la connexion √† la base de donn√©es...")
    if not test_berinia_connection():
        print("‚ùå √âchec de la connexion √† la base de donn√©es. Abandon.")
        return False
        
    print("‚úÖ Connexion √† la base de donn√©es r√©ussie.")
    
    try:
        # Cr√©er une connexion √† la base de donn√©es
        engine = create_engine(DB_URL)
        
        with engine.connect() as conn:
            # Commencer une transaction
            trans = conn.begin()
            try:
                # 1. Supprimer les leads
                print("üóëÔ∏è Suppression des leads de la base de donn√©es...")
                result = conn.execute(text("DELETE FROM leads"))
                print(f"‚úÖ {result.rowcount} leads supprim√©s avec succ√®s.")
                
                # 2. R√©initialiser la s√©quence d'ID des leads
                print("üîÑ R√©initialisation de la s√©quence d'ID des leads...")
                conn.execute(text("ALTER SEQUENCE leads_id_seq RESTART WITH 1"))
                print("‚úÖ S√©quence d'ID des leads r√©initialis√©e.")
                
                # 3. Facultatif: Supprimer les campagnes
                if not preserve_campaigns:
                    print("üóëÔ∏è Suppression des campagnes...")
                    result = conn.execute(text("DELETE FROM campaigns"))
                    print(f"‚úÖ {result.rowcount} campagnes supprim√©es avec succ√®s.")
                    
                    print("üîÑ R√©initialisation de la s√©quence d'ID des campagnes...")
                    conn.execute(text("ALTER SEQUENCE campaigns_id_seq RESTART WITH 1"))
                    print("‚úÖ S√©quence d'ID des campagnes r√©initialis√©e.")
                else:
                    print("‚ÑπÔ∏è Les campagnes existantes ont √©t√© conserv√©es.")
                
                # Valider la transaction
                trans.commit()
                print("\n‚úÖ R√©initialisation de la base de donn√©es Berinia r√©ussie.")
                return True
                
            except Exception as e:
                # Annuler la transaction en cas d'erreur
                trans.rollback()
                print(f"‚ùå Erreur lors de la r√©initialisation de la base de donn√©es: {str(e)}")
                return False
                
    except Exception as e:
        print(f"‚ùå Erreur lors de la connexion √† la base de donn√©es: {str(e)}")
        return False

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='R√©initialiser la base de donn√©es Berinia.')
    parser.add_argument('--with-campaigns', action='store_true', 
                        help='Supprimer √©galement les campagnes (par d√©faut: conserver les campagnes)')
    args = parser.parse_args()
    
    success = reset_berinia_database(preserve_campaigns=not args.with_campaigns)
    
    if success:
        print("\nüöÄ Pour red√©marrer le syst√®me avec une base propre, ex√©cutez:")
        print("sudo systemctl restart infra-ia-agents")
        sys.exit(0)
    else:
        print("\n‚ùå La r√©initialisation a √©chou√©.")
        sys.exit(1)
