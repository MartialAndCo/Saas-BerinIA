#!/usr/bin/env python3
"""
Script pour cr√©er une campagne de test directement avec SQL.
Contourne les potentiels probl√®mes avec les mod√®les ORM.
"""

import os
import sys
import json
from datetime import datetime

# Ajouter le chemin du backend Berinia au PYTHONPATH
BERINIA_BACKEND_PATH = "/root/berinia/backend"
if BERINIA_BACKEND_PATH not in sys.path:
    sys.path.append(BERINIA_BACKEND_PATH)

try:
    from sqlalchemy import create_engine, text
    from app.database.session import SessionLocal
    
    # Tester la connexion √† la base de donn√©es
    engine = create_engine(os.environ.get("DATABASE_URL", "postgresql://berinia_user:Bhcmi6pm_@localhost/berinia"))
    connection = engine.connect()
    print("‚úÖ Connexion √† la base de donn√©es r√©ussie")
    
except ImportError as e:
    print(f"‚ùå Erreur lors de l'importation des modules: {str(e)}")
    sys.exit(1)
except Exception as e:
    print(f"‚ùå Erreur de connexion: {str(e)}")
    sys.exit(1)

def create_test_campaign():
    """
    Cr√©e une campagne de test directement avec SQL
    """
    try:
        # V√©rifier si une campagne de test existe d√©j√†
        result = connection.execute(text("SELECT id, nom FROM campaigns WHERE nom LIKE 'Test%'"))
        existing_campaigns = result.fetchall()
        
        if existing_campaigns:
            campaign_id = existing_campaigns[0][0]
            campaign_name = existing_campaigns[0][1]
            print(f"‚ÑπÔ∏è Une campagne de test existe d√©j√†: {campaign_name} (ID={campaign_id})")
            return campaign_id
        
        # V√©rifier qu'une niche existe
        result = connection.execute(text("SELECT id, nom FROM niches"))
        niches = result.fetchall()
        
        if not niches:
            print("‚ùå Aucune niche trouv√©e, cr√©ation d'une niche par d√©faut")
            connection.execute(text("INSERT INTO niches (nom, description) VALUES ('Default', 'Default niche for testing')"))
            connection.commit()
            niche_id = 1
        else:
            niche_id = niches[0][0]
            print(f"‚úÖ Niche trouv√©e: {niches[0][1]} (ID={niche_id})")
        
        # Cr√©er une nouvelle campagne
        campaign_name = f"Test Campaign {datetime.now().strftime('%Y%m%d%H%M')}"
        result = connection.execute(
            text("INSERT INTO campaigns (nom, description, date_creation, statut, target_leads, agent, niche_id) "
                 "VALUES (:nom, :description, :date_creation, :statut, :target_leads, :agent, :niche_id) RETURNING id"),
            {
                "nom": campaign_name,
                "description": "Campagne cr√©√©e pour les tests d'int√©gration",
                "date_creation": datetime.now(),
                "statut": "active",
                "target_leads": 100,
                "agent": "TestAgent",
                "niche_id": niche_id
            }
        )
        
        connection.commit()
        campaign_id = result.fetchone()[0]
        
        print(f"‚úÖ Campagne cr√©√©e avec succ√®s: {campaign_name} (ID={campaign_id})")
        
        # R√©cup√©rer toutes les campagnes pour v√©rification
        result = connection.execute(text("SELECT id, nom, niche_id FROM campaigns"))
        all_campaigns = result.fetchall()
        
        print("\nListe des campagnes:")
        for campaign in all_campaigns:
            print(f"  - ID {campaign[0]}: {campaign[1]} (Niche ID: {campaign[2]})")
        
        return campaign_id
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de la campagne: {str(e)}")
        connection.rollback()
        return False

if __name__ == "__main__":
    print("=== Cr√©ation d'une campagne de test dans Berinia ===")
    print(f"üìÖ Date: {datetime.now().isoformat()}")
    
    try:
        campaign_id = create_test_campaign()
        
        print("\n=== R√©capitulatif ===")
        if campaign_id:
            print(f"‚úÖ Campagne cr√©√©e ou existante (ID: {campaign_id})")
            print(f"   Utilisez cet ID pour les tests d'insertion de leads")
            connection.close()
            sys.exit(0)
        else:
            print("‚ùå La cr√©ation de la campagne a √©chou√©")
            connection.close()
            sys.exit(1)
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
        sys.exit(1)
    finally:
        if 'connection' in locals():
            connection.close()
