#!/usr/bin/env python3
"""
Script pour cr√©er une campagne de test dans la base de donn√©es Berinia.
Cette campagne pourra ensuite √™tre utilis√©e pour y associer des leads.
"""

import os
import sys
import json
from datetime import datetime

# Ajouter le chemin du backend Berinia au PYTHONPATH
BERINIA_BACKEND_PATH = "/root/berinia/backend"
if BERINIA_BACKEND_PATH not in sys.path:
    sys.path.append(BERINIA_BACKEND_PATH)

try:
    from sqlalchemy import create_engine, text
    from app.database.session import SessionLocal
    from app.models.campaign import Campaign
    from app.models.niche import Niche
    
    # Importer les modules suppl√©mentaires n√©cessaires
    import sqlalchemy
    print(f"SQLAlchemy version: {sqlalchemy.__version__}")
    print("‚úÖ Modules import√©s avec succ√®s")
    
except ImportError as e:
    print(f"‚ùå Erreur lors de l'importation des modules: {str(e)}")
    sys.exit(1)

def create_test_campaign():
    """
    Cr√©e une campagne de test dans la base de donn√©es Berinia
    """
    try:
        # √âtablir une connexion √† la base de donn√©es
        db = SessionLocal()
        
        # V√©rifier si une niche existe (ID=1)
        niche = db.query(Niche).filter(Niche.id == 1).first()
        if not niche:
            print("‚ùå Aucune niche trouv√©e avec ID=1, cr√©ation impossible")
            db.close()
            return False
            
        print(f"‚úÖ Niche trouv√©e: {niche.nom} (ID={niche.id})")
        
        # V√©rifier si une campagne de test existe d√©j√†
        existing_campaign = db.query(Campaign).filter(Campaign.nom.like("Test%")).first()
        if existing_campaign:
            print(f"‚ÑπÔ∏è Une campagne de test existe d√©j√†: {existing_campaign.nom} (ID={existing_campaign.id})")
            db.close()
            return True
        
        # Cr√©er une nouvelle campagne
        new_campaign = Campaign(
            nom=f"Test Campaign {datetime.now().strftime('%Y%m%d%H%M')}",
            description="Campagne cr√©√©e pour les tests d'int√©gration",
            statut="active",
            target_leads=100,
            agent="TestAgent",
            niche_id=niche.id
        )
        
        # Ajouter la campagne √† la base de donn√©es
        db.add(new_campaign)
        db.commit()
        db.refresh(new_campaign)
        
        print(f"‚úÖ Campagne cr√©√©e avec succ√®s: {new_campaign.nom} (ID={new_campaign.id})")
        
        # R√©cup√©rer toutes les campagnes pour v√©rification
        all_campaigns = db.query(Campaign).all()
        print("\nListe des campagnes:")
        for campaign in all_campaigns:
            print(f"  - ID {campaign.id}: {campaign.nom} (Niche ID: {campaign.niche_id})")
        
        db.close()
        return new_campaign.id
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de la campagne: {str(e)}")
        return False

if __name__ == "__main__":
    print("=== Cr√©ation d'une campagne de test dans Berinia ===")
    print(f"üìÖ Date: {datetime.now().isoformat()}")
    
    campaign_id = create_test_campaign()
    
    print("\n=== R√©capitulatif ===")
    if campaign_id:
        print(f"‚úÖ Campagne cr√©√©e ou existante (ID: {campaign_id})")
        print(f"   Utilisez cet ID pour les tests d'insertion de leads")
        sys.exit(0)
    else:
        print("‚ùå La cr√©ation de la campagne a √©chou√©")
        sys.exit(1)
